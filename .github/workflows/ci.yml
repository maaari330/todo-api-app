name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: JSON Lint
        uses: kirkeaton/action-publint@v1
        with:
          files: '**/*.json'

      - name: YAML Lint
        uses: kustomize-everything/action-yaml-linter@main
        with:
          path: '**/*.y?(a)ml'

  build-and-test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Build & Package (skip tests)
        run: mvn clean package -DskipTests

      - name: Run Unit Tests
        run: mvn test
  
  docker-build-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USER }}/todo-api:latest
  
  integration-tests:
    needs: docker-build-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Start services via Docker Compose
        run: docker-compose up -d
        env:
          MYSQL_ROOT_PASSWORD:      ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE:           ${{ secrets.MYSQL_DATABASE }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}

      - name: Wait for DB healthy
        run: |
          for i in {1..12}; do
            status=$(docker inspect --format='{{.State.Health.Status}}' todo-db)
            if [ "$status" = "healthy" ]; then
              echo "DB is healthy"; break
            fi
            sleep 5
          done

      - name: Wait for App Healthy  ##明日はここから下のbashコマンドを解釈するところから開始
        run: |
          for i in {1..12}; do
            if curl -sf http://localhost:8080/actuator/health; then
              echo "App is up"; break
            fi
            sleep 5
          done

      - name: OpenAPI Endpoint Checks
        run: |
          curl -f http://localhost:8080/todos
          curl -f -X POST http://localhost:8080/todos \
               -H "Content-Type: application/json" \
               -d '{"title":"CI Test","completed":false}'

      - name: Check JSON Spec
        run: |
          curl -s http://localhost:8080/v3/api-docs | jq empty

      - name: Check YAML Spec
        run: |
          curl -s http://localhost:8080/v3/api-docs.yaml | yq eval -j - | jq empty